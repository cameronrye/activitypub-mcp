---
// Search component using Pagefind
---

<div class="search-container">
  <input
    type="search"
    id="search-input"
    placeholder="Search documentation..."
    class="search-input"
    autocomplete="off"
    aria-label="Search documentation"
  >
  <button type="button" class="search-button" aria-label="Search">
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="11" cy="11" r="8"></circle>
      <path d="m21 21-4.35-4.35"></path>
    </svg>
  </button>
  <div id="search-results" class="search-results">
    <div id="search-loading" class="search-loading" style="display: none;">
      <div class="loading-spinner"></div>
      <span>Searching...</span>
    </div>
    <div id="search-content"></div>
  </div>
</div>

<style>
  .search-container {
    position: relative;
    width: 100%;
    max-width: 400px;
    display: flex;
    align-items: center;
  }

  .search-input {
    width: 100%;
    padding: var(--space-3) var(--space-12) var(--space-3) var(--space-4);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-lg);
    background: linear-gradient(
      135deg,
      var(--bg-primary) 0%,
      var(--bg-secondary) 100%
    );
    color: var(--text-primary);
    font-size: var(--text-sm);
    transition: all var(--transition-fast);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow:
      0 0 0 3px rgba(37, 99, 235, 0.1),
      0 4px 12px rgba(0, 0, 0, 0.1);
    transform: translateY(-1px);
  }

  .search-button {
    position: absolute;
    right: var(--space-2);
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: var(--space-2);
    border-radius: var(--radius-sm);
    transition: all var(--transition-fast);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;
  }

  .search-button:hover {
    color: var(--color-primary);
    background-color: rgba(37, 99, 235, 0.1);
  }

  .search-button:focus {
    outline: none;
    color: var(--color-primary);
    background-color: rgba(37, 99, 235, 0.1);
    box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
  }
  
  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: linear-gradient(
      135deg,
      var(--bg-primary) 0%,
      var(--bg-secondary) 100%
    );
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-xl);
    max-height: 400px;
    overflow-y: auto;
    z-index: var(--z-dropdown);
    display: none;
    margin-top: var(--space-2);
    backdrop-filter: blur(12px);
  }

  .search-results.show {
    display: block;
    animation: searchDropdownFadeIn 0.2s ease-out;
  }

  @keyframes searchDropdownFadeIn {
    from {
      opacity: 0;
      transform: translateY(-8px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .search-loading {
    padding: var(--space-6);
    text-align: center;
    color: var(--text-secondary);
    font-size: var(--text-sm);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-3);
  }

  .loading-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid var(--border-primary);
    border-top: 2px solid var(--color-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .search-result {
    display: block;
    padding: var(--space-4);
    border-bottom: 1px solid var(--border-primary);
    color: var(--text-primary);
    text-decoration: none;
    transition: all var(--transition-fast);
    border-radius: var(--radius-md);
    margin: var(--space-1);
    position: relative;
  }

  .search-result:hover,
  .search-result.active {
    background: linear-gradient(
      135deg,
      var(--color-primary) 0%,
      var(--color-primary-light) 100%
    );
    color: var(--color-white);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
    border-color: transparent;
  }

  .search-result:hover .result-title,
  .search-result.active .result-title {
    color: var(--color-white);
  }

  .search-result:hover .result-excerpt,
  .search-result.active .result-excerpt {
    color: rgba(255, 255, 255, 0.9);
  }

  .search-result:last-child {
    border-bottom: none;
  }

  .result-title {
    font-weight: var(--font-semibold);
    margin-bottom: var(--space-2);
    font-size: var(--text-base);
    line-height: var(--leading-tight);
    color: var(--text-primary);
  }

  .result-excerpt {
    font-size: var(--text-sm);
    color: var(--text-secondary);
    line-height: var(--leading-relaxed);
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .result-excerpt mark {
    background-color: rgba(59, 130, 246, 0.3);
    color: var(--color-primary);
    padding: 1px 4px;
    border-radius: var(--radius-sm);
    font-weight: var(--font-medium);
  }

  .search-result:hover .result-excerpt mark,
  .search-result.active .result-excerpt mark {
    background-color: rgba(255, 255, 255, 0.3);
    color: var(--color-white);
  }

  .no-results {
    padding: var(--space-6);
    text-align: center;
    color: var(--text-secondary);
    font-style: italic;
  }

  /* Responsive design */
  @media (max-width: 640px) {
    .search-container {
      max-width: 100%;
    }

    .search-input {
      font-size: var(--text-base);
      padding: var(--space-4) var(--space-12) var(--space-4) var(--space-4);
    }

    .search-results {
      max-height: 300px;
    }

    .search-result {
      padding: var(--space-3);
      margin: var(--space-1);
    }

    .result-title {
      font-size: var(--text-sm);
    }

    .result-excerpt {
      font-size: var(--text-xs);
    }
  }

  /* Enhanced focus states for accessibility */
  .search-input:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  .search-button:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  .search-result:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .search-input {
      border-width: 2px;
    }

    .search-result:hover,
    .search-result.active {
      border: 2px solid var(--color-primary);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .search-input,
    .search-button,
    .search-result,
    .search-results {
      transition: none;
    }

    .search-results.show {
      animation: none;
    }

    .loading-spinner {
      animation: none;
    }
  }
</style>

<script>
  // Pagefind search implementation
  class PagefindSearch {
    constructor() {
      this.searchInput = document.getElementById('search-input');
      this.searchResults = document.getElementById('search-results');
      this.searchContent = document.getElementById('search-content');
      this.searchLoading = document.getElementById('search-loading');
      this.pagefind = null;
      this.fallbackData = [];
      this.debounceTimer = null;
      this.currentQuery = '';
      
      this.init();
    }
    
    async init() {
      if (!this.searchInput || !this.searchResults) return;

      // Load Pagefind
      try {
        const currentPath = window.location.pathname;
        const basePath = currentPath.includes('/activitypub-mcp/') ? '/activitypub-mcp/' : '/';
        const pagefindPath = `${basePath}pagefind/pagefind.js`;

        // @ts-ignore
        const pagefindModule = await import(pagefindPath);
        this.pagefind = pagefindModule;
      } catch (error) {
        console.warn('Pagefind not available:', error);
        // Fallback to simple search
        await this.initFallbackSearch();
      }

      // Bind events (always bind events regardless of search method)
      this.searchInput.addEventListener('input', this.handleInput.bind(this));
      this.searchInput.addEventListener('focus', this.handleFocus.bind(this));
      this.searchInput.addEventListener('keydown', this.handleKeyDown.bind(this));
      document.addEventListener('click', this.handleDocumentClick.bind(this));
    }
    
    handleInput(event) {
      const query = event.target.value.trim();
      
      // Clear previous timer
      if (this.debounceTimer) {
        clearTimeout(this.debounceTimer);
      }
      
      // Debounce search
      this.debounceTimer = setTimeout(() => {
        if (query.length >= 2) {
          this.performSearch(query);
        } else {
          this.hideResults();
        }
      }, 300);
    }
    
    handleFocus(event) {
      const query = event.target.value.trim();
      if (query.length >= 2 && this.currentQuery === query) {
        this.showResults();
      }
    }
    
    handleKeyDown(event) {
      const results = this.searchResults.querySelectorAll('.search-result');
      const activeResult = this.searchResults.querySelector('.search-result.active');
      
      switch (event.key) {
        case 'ArrowDown':
          event.preventDefault();
          if (activeResult) {
            const next = activeResult.nextElementSibling;
            if (next && next.classList.contains('search-result')) {
              activeResult.classList.remove('active');
              next.classList.add('active');
            }
          } else if (results.length > 0) {
            results[0].classList.add('active');
          }
          break;
          
        case 'ArrowUp':
          event.preventDefault();
          if (activeResult) {
            const prev = activeResult.previousElementSibling;
            if (prev && prev.classList.contains('search-result')) {
              activeResult.classList.remove('active');
              prev.classList.add('active');
            }
          }
          break;
          
        case 'Enter':
          event.preventDefault();
          if (activeResult) {
            window.location.href = activeResult.href;
          }
          break;
          
        case 'Escape':
          this.hideResults();
          this.searchInput.blur();
          break;
      }
    }
    
    handleDocumentClick(event) {
      if (!this.searchInput.contains(event.target) && !this.searchResults.contains(event.target)) {
        this.hideResults();
      }
    }
    
    async performSearch(query) {
      if (!this.pagefind) return;
      
      this.currentQuery = query;
      this.showLoading();
      
      try {
        const search = await this.pagefind.search(query);
        const results = await Promise.all(
          search.results.slice(0, 10).map(result => result.data())
        );
        
        this.displayResults(results, query);
      } catch (error) {
        console.error('Search error:', error);
        this.displayError();
      }
    }
    
    displayResults(results, query) {
      this.hideLoading();
      
      if (results.length === 0) {
        this.searchContent.innerHTML = '<div class="no-results">No results found</div>';
      } else {
        this.searchContent.innerHTML = results.map(result => {
          const excerpt = this.createExcerpt(result.excerpt, query);
          return `
            <a href="${result.url}" class="search-result">
              <div class="result-title">${this.highlightQuery(result.meta.title || 'Untitled', query)}</div>
              <div class="result-excerpt">${excerpt}</div>
            </a>
          `;
        }).join('');
      }
      
      this.showResults();
    }
    
    displayError() {
      this.hideLoading();
      this.searchContent.innerHTML = '<div class="no-results">Search error occurred</div>';
      this.showResults();
    }
    
    createExcerpt(excerpt, query, maxLength = 150) {
      if (!excerpt) return '';
      
      let text = excerpt;
      if (text.length > maxLength) {
        text = text.substring(0, maxLength) + '...';
      }
      
      return this.highlightQuery(text, query);
    }
    
    highlightQuery(text, query) {
      if (!text || !query) return text;
      
      const regex = new RegExp(`(${this.escapeRegex(query)})`, 'gi');
      return text.replace(regex, '<mark>$1</mark>');
    }
    
    escapeRegex(string) {
      return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    
    showResults() {
      this.searchResults.classList.add('show');
    }
    
    hideResults() {
      this.searchResults.classList.remove('show');
      // Remove active states
      const activeResults = this.searchResults.querySelectorAll('.search-result.active');
      activeResults.forEach(result => result.classList.remove('active'));
    }
    
    showLoading() {
      this.searchLoading.style.display = 'block';
      this.searchContent.innerHTML = '';
      this.showResults();
    }
    
    hideLoading() {
      this.searchLoading.style.display = 'none';
    }

    async initFallbackSearch() {
      // Simple fallback search without Pagefind
      console.log('Using fallback search');

      // Load search data for fallback
      try {
        const currentPath = window.location.pathname;
        const basePath = currentPath.includes('/activitypub-mcp/') ? '/activitypub-mcp/' : '/';
        const searchDataPath = `${basePath}search.json`;

        const response = await fetch(searchDataPath);
        if (response.ok) {
          this.fallbackData = await response.json();
        }
      } catch (error) {
        console.warn('Could not load fallback search data:', error);
        this.fallbackData = [];
      }

      // Override performSearch to use fallback data
      this.performSearch = this.performFallbackSearch.bind(this);
    }

    performFallbackSearch(query) {
      if (!this.fallbackData || this.fallbackData.length === 0) {
        this.displayResults([], query);
        return;
      }

      const queryLower = query.toLowerCase();
      const results = this.fallbackData.filter(item =>
        item.title.toLowerCase().includes(queryLower) ||
        item.excerpt.toLowerCase().includes(queryLower) ||
        (item.content && item.content.toLowerCase().includes(queryLower))
      ).slice(0, 10); // Limit to 10 results

      // Convert to Pagefind-like format
      const formattedResults = results.map(item => ({
        url: item.url,
        meta: { title: item.title },
        excerpt: item.excerpt
      }));

      this.displayResults(formattedResults, query);
    }
  }
  
  // Initialize search when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new PagefindSearch());
  } else {
    new PagefindSearch();
  }
</script>
