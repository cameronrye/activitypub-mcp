---
import BaseLayout from "./BaseLayout.astro";

export interface Props {
  title?: string;
  description?: string;
  frontmatter?: {
    title?: string;
    description?: string;
  };
}

const { title, description, frontmatter } = Astro.props;
const pageTitle = title || frontmatter?.title || "Documentation";
const pageDescription =
  description ||
  frontmatter?.description ||
  "ActivityPub MCP Server Documentation";

// Navigation structure for docs
const docsNav = [
  {
    title: "Getting Started",
    items: [
      { title: "Overview", href: "/docs/" },
      { title: "Configuration Guide", href: "/docs/setup/config-guide/" },
      { title: "Cross-Platform Setup", href: "/docs/setup/cross-platform/" },
    ],
  },
  {
    title: "User Guides",
    items: [
      { title: "Usage Guide", href: "/docs/guides/usage-guide/" },
      { title: "Examples", href: "/docs/guides/examples/" },
      {
        title: "Real-World Scenarios",
        href: "/docs/guides/real-world-test-scenario/",
      },
    ],
  },
  {
    title: "Development",
    items: [
      {
        title: "Dependency Management",
        href: "/docs/development/dependency-management/",
      },
      {
        title: "Performance Monitoring",
        href: "/docs/development/performance-monitoring/",
      },
      {
        title: "Security Audit",
        href: "/docs/development/security-audit-checklist/",
      },
    ],
  },
  {
    title: "Specifications",
    items: [
      {
        title: "ActivityPub Guide",
        href: "/docs/specifications/activitypub-llm-specification-guide/",
      },
      {
        title: "ActivityStreams Vocabulary",
        href: "/docs/specifications/activitystreams-vocabulary-llm-specification-guide/",
      },
      {
        title: "Fedify CLI",
        href: "/docs/specifications/fedify-cli-llm-specification-guide/",
      },
      {
        title: "WebFinger Guide",
        href: "/docs/specifications/webfinger-llm-specification-guide/",
      },
    ],
  },
  {
    title: "Project Info",
    items: [{ title: "Changelog", href: "/docs/changelog/" }],
  },
];

// Get current path for active navigation
const currentPath = Astro.url.pathname;
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <div class="docs-layout">
    <div class="container">
      <div class="docs-grid">
        <!-- Sidebar Navigation -->
        <aside class="docs-sidebar">
          <div class="sidebar-content">
            <div class="sidebar-header">
              <h2>Documentation</h2>
            </div>
            
            <nav class="docs-nav">
              {docsNav.map(section => (
                <div class="nav-section">
                  <h3 class="nav-section-title">{section.title}</h3>
                  <ul class="nav-section-items">
                    {section.items.map(item => (
                      <li>
                        <a 
                          href={item.href} 
                          class={`nav-item ${currentPath === item.href ? 'active' : ''}`}
                        >
                          {item.title}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </nav>
          </div>
        </aside>
        
        <!-- Main Content -->
        <main class="docs-main">
          <div class="docs-content">
            <slot />
          </div>
          
          <!-- Table of Contents (will be populated by JS) -->
          <aside class="docs-toc">
            <div class="toc-content">
              <h4>On this page</h4>
              <nav id="table-of-contents">
                <!-- TOC will be generated by JavaScript -->
              </nav>
            </div>
          </aside>
        </main>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  .docs-layout {
    min-height: calc(100vh - 200px);
  }
  
  .docs-grid {
    display: grid;
    grid-template-columns: 280px 1fr;
    gap: var(--space-8);
    align-items: start;
  }
  
  @media (max-width: 1024px) {
    .docs-grid {
      grid-template-columns: 1fr;
    }
    
    .docs-sidebar {
      order: 2;
    }
    
    .docs-main {
      order: 1;
    }
  }
  
  /* Sidebar */
  .docs-sidebar {
    position: sticky;
    top: calc(var(--space-20) + var(--space-4));
    max-height: calc(100vh - var(--space-24));
    overflow-y: auto;
  }
  
  .sidebar-content {
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-lg);
    padding: var(--space-6);
  }
  
  .sidebar-header h2 {
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    margin-bottom: var(--space-6);
    color: var(--text-primary);
  }
  
  .nav-section {
    margin-bottom: var(--space-6);
  }
  
  .nav-section:last-child {
    margin-bottom: 0;
  }
  
  .nav-section-title {
    font-size: var(--text-sm);
    font-weight: var(--font-semibold);
    color: var(--text-primary);
    margin-bottom: var(--space-3);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .nav-section-items {
    list-style: none;
  }
  
  .nav-section-items li {
    margin-bottom: var(--space-1);
  }
  
  .nav-item {
    display: block;
    padding: var(--space-2) var(--space-3);
    color: var(--text-secondary);
    text-decoration: none;
    border-radius: var(--radius-sm);
    font-size: var(--text-sm);
    transition: all var(--transition-fast);
  }
  
  .nav-item:hover {
    background-color: var(--bg-tertiary);
    color: var(--text-primary);
  }
  
  .nav-item.active {
    background-color: var(--color-primary);
    color: var(--color-white);
  }
  
  /* Main content */
  .docs-main {
    display: grid;
    grid-template-columns: 1fr 200px;
    gap: var(--space-8);
    align-items: start;
  }
  
  @media (max-width: 1280px) {
    .docs-main {
      grid-template-columns: 1fr;
    }
    
    .docs-toc {
      display: none;
    }
  }
  
  .docs-content {
    max-width: none;
  }
  
  /* Table of Contents */
  .docs-toc {
    position: sticky;
    top: calc(var(--space-20) + var(--space-4));
    max-height: calc(100vh - var(--space-24));
    overflow-y: auto;
  }
  
  .toc-content {
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-md);
    padding: var(--space-4);
  }
  
  .toc-content h4 {
    font-size: var(--text-sm);
    font-weight: var(--font-semibold);
    color: var(--text-primary);
    margin-bottom: var(--space-3);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  #table-of-contents {
    font-size: var(--text-sm);
  }
  
  #table-of-contents ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }
  
  #table-of-contents li {
    margin-bottom: var(--space-1);
  }
  
  #table-of-contents a {
    display: block;
    padding: var(--space-1) 0;
    color: var(--text-secondary);
    text-decoration: none;
    transition: color var(--transition-fast);
  }
  
  #table-of-contents a:hover {
    color: var(--color-primary);
  }
  
  #table-of-contents a.active {
    color: var(--color-primary);
    font-weight: var(--font-medium);
  }
  
  /* Mobile sidebar toggle */
  @media (max-width: 1024px) {
    .docs-sidebar {
      position: relative;
      top: auto;
      max-height: none;
      margin-bottom: var(--space-8);
    }
  }
</style>

<script>
  // Generate table of contents
  function generateTOC() {
    const toc = document.getElementById('table-of-contents');
    const headings = document.querySelectorAll('.docs-content h2, .docs-content h3, .docs-content h4');
    
    if (!toc || headings.length === 0) return;
    
    const tocList = document.createElement('ul');
    
    headings.forEach((heading, index) => {
      // Create ID if it doesn't exist
      if (!heading.id) {
        heading.id = heading.textContent
          .toLowerCase()
          .replace(/[^\w\s-]/g, '')
          .replace(/\s+/g, '-');
      }
      
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = `#${heading.id}`;
      a.textContent = heading.textContent;
      a.style.paddingLeft = `${(parseInt(heading.tagName.charAt(1)) - 2) * 12}px`;
      
      li.appendChild(a);
      tocList.appendChild(li);
    });
    
    toc.appendChild(tocList);
  }
  
  // Initialize TOC when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', generateTOC);
  } else {
    generateTOC();
  }
</script>
